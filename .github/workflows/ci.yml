# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    
    - name: folder check
      run: ls -a
    
    - name: target folder
      run: |
        cd target
        ls -a
        
        

    - name: github workspace
      run: echo ${{ github.workspace }}
    
    - name: display settings
      run: cat ${{ github.workspace}}/settings.xml
  
  StaticAnalysis:
    runs-on: ubuntu-latest
    needs: build
    name: Static Analysis
    
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

  UnitTesting:
    runs-on: ubuntu-latest
    needs: StaticAnalysis
    name: Unit Test
    
    steps:
      - run: echo Should run unit tests.
      - name: Checkout Code
        uses: actions/checkout@v1
      - name: Build and Run Tests
        run: mvn -B test --file pom.xml

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v1
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
          github_token: ${{ secrets.GH_TOKEN }}
      - name: Test Report
        uses: ashley-taylor/junit-report-annotations-action@1.3
        if: always()
        with:
          access-token: ${{ secrets.GH_TOKEN }}
  
  CodeCoverage:
    runs-on: ubuntu-latest
    needs: UnitTesting
    name: Code Coverage
    
    steps:
      - run: echo Should run code coverage.
      - name: Checkout Code
        uses: actions/checkout@v1
      - name: Build and Run Tests
        run: mvn -X org.jacoco:jacoco-maven-plugin:report 

          
  War:
    runs-on: ubuntu-latest
    needs: CodeCoverage
    name: War 

    steps:
      - run: echo should packaging war
      - name: Checkout Code
        uses: actions/checkout@v1
      - name: War packaging
        run: mvn -X war:war
        
  ToArtifactory:
    runs-on: ubuntu-latest
    needs: build
    name: ToArtifactory
         
    steps:
      - name: Checkout Code
        uses: s4u/maven-settings-action@v2.3.0
        with:
          servers: '[{ "id": "artifactory", "username": "${{ secrets.ARTIFACTORY_USERNAME }}", "password": "${{ secrets.ARTIFACTORY_PASSWORD }}" }]'
      
      - name: publish
        run: |
          mvn -B package --file ${{ github.workspace }}/pom.xml -X
        #  mvn --batch-mode deploy
      
